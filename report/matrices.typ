#let nfa_1_0 = (
  (0, 1, 0, 0, 0),
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 0, 1),
)
#let nfa_1_5 = (
  (0, 1, 1, 0, 0),
  (1, 0, 1, 0, 0),
  (1, 0, 0, 1, 0),
  (0, 0, 0, 1, 1),
  (0, 0, 0, 0, 1),
)
#let nfa_2_0 = (
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let nfa_2_5 = (
  (1, 0, 1, 0, 0),
  (1, 0, 0, 1, 0),
  (0, 0, 0, 1, 1),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let nfa_3_0 = (
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa_1_0 = (
  (0, 1, 0, 0, 0),
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 0, 1),
)
#let pa_1_5 = (
  (0, 1/2, 1/2, 0, 0),
  (1/2, 0, 1/2, 0, 0),
  (1/2, 0, 0, 1/2, 0),
  (0, 0, 0, 1/2, 1/2),
  (0, 0, 0, 0, 1),
)
#let pa_2_0 = (
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa_2_5 = (
  (1/2, 0, 1/2, 0, 0),
  (1/2, 0, 0, 1/2, 0),
  (0, 0, 0, 1/2, 1/2),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa_3_0 = (
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa_all = (
  pa_1_0,
  pa_1_5,
  pa_2_0,
  pa_2_5,
  pa_3_0
)

#let sum_arr(arr) = arr.sum()
#let sum_each_arr(arr1, arr2) = arr1.zip(arr2).map(sum_arr)
#let divide_arr(element) = element / 5
#let pa_expected = pa_all.flatten().chunks(25).reduce(sum_each_arr).map(divide_arr).chunks(5)

//////////////// modified game matrices
#let nfa2_1_0 = (
  (0, 1, 0, 0, 0),
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 0, 1),
)
#let nfa2_1_5 = (
  (0, 1, 1, 0, 0),
  (1, 0, 1, 0, 0),
  (1, 0, 0, 1, 0),
  (0, 0, 0, 1, 1),
  (0, 0, 0, 0, 1),
)
#let nfa2_2_0 = (
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let nfa2_2_5 = (
  (1, 0, 1, 0, 0),
  (1, 0, 0, 1, 0),
  (0, 0, 0, 1, 1),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let nfa2_3_0 = (
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let nfa2_3_5 = (
  (1, 1, 0, 0, 0),
  (0, 0, 1, 1, 0),
  (1, 0, 0, 0, 1),
  (0, 0, 0, 1, 1),
  (0, 0, 0, 0, 1),
)
#let pa2_1_0 = (
  (0, 1, 0, 0, 0),
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 0, 1),
)
#let pa2_1_5 = (
  (0, 1/2, 1/2, 0, 0),
  (1/2, 0, 1/2, 0, 0),
  (1/2, 0, 0, 1/2, 0),
  (0, 0, 0, 1/2, 1/2),
  (0, 0, 0, 0, 1),
)
#let pa2_2_0 = (
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa2_2_5 = (
  (1/2, 0, 1/2, 0, 0),
  (1/2, 0, 0, 1/2, 0),
  (0, 0, 0, 1/2, 1/2),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa2_3_0 = (
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa2_3_5 = (
  (0.5, 0.5, 0, 0, 0),
  (0, 0, 0.5, 0.5, 0),
  (0.5, 0, 0, 0, 0.5),
  (0, 0, 0, 0.5, 0.5),
  (0, 0, 0, 0, 1),
)
#let pa2_all = (
  pa2_1_0,
  pa2_1_5,
  pa2_2_0,
  pa2_2_5,
  pa2_3_0,
  pa2_3_5,
)

#let divide_arr2(element) = calc.round(element / 6, digits: 2)
#let pa_expected2 = pa2_all.flatten().chunks(25).reduce(sum_each_arr).map(divide_arr2).chunks(5)

//////////////// modified game matrices
#let nfa3_1_0 = (
  (0, 1, 0, 0, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 0, 1),
)
#let nfa3_1_5 = (
  (0, 1, 1, 0, 0),
  (1, 0, 1, 0, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 1, 1),
  (0, 0, 0, 0, 1),
)
#let nfa3_2_0 = (
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let nfa3_2_5 = (
  (1, 0, 1, 0, 0),
  (1, 0, 0, 1, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let nfa3_3_0 = (
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa3_1_0 = (
  (0, 1, 0, 0, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 0, 1),
  (0, 0, 0, 0, 1),
)
#let pa3_1_5 = (
  (0, 1/2, 1/2, 0, 0),
  (1/2, 0, 1/2, 0, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 1/2, 1/2),
  (0, 0, 0, 0, 1),
)
#let pa3_2_0 = (
  (0, 0, 1, 0, 0),
  (1, 0, 0, 0, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa3_2_5 = (
  (1/2, 0, 1/2, 0, 0),
  (1/2, 0, 0, 1/2, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa3_3_0 = (
  (1, 0, 0, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 1, 0, 0),
  (0, 0, 0, 1, 0),
  (0, 0, 0, 0, 1),
)
#let pa3_all = (
  pa3_1_0,
  pa3_1_5,
  pa3_2_0,
  pa3_2_5,
  pa3_3_0
)
#let divide_arr3(element) = calc.round(element / 5, digits: 2)
#let pa_expected3 = pa3_all.flatten().chunks(25).reduce(sum_each_arr).map(divide_arr3).chunks(5)